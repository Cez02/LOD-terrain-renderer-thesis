#version 460

// Setup

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes: require

#extension GL_EXT_mesh_shader : enable

#extension GL_EXT_shader_16bit_storage : require

#extension GL_EXT_shader_explicit_arithmetic_types_int8  : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require


#extension GL_EXT_shader_atomic_int64 : require

#extension GL_EXT_control_flow_attributes: require
#define UNROLL_LOOP [[unroll]]

#include "common.h"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(max_vertices=MAX_MESH_OUTPUT_VERTICES, max_primitives=MAX_MESH_OUTPUT_PRIMITIVES) out;
layout(triangles) out;




// SSBOs

layout(std430, binding = 0) readonly buffer HeightmapData {
    int16_t m_Heights[];
} heightmapData;

#ifdef ENCODED_MESHLETS

    layout(std430, binding = 1) readonly buffer MeshletDescriptions {
        EncodedMeshletDescription descriptions[];
    } meshletDescriptions;

#else

    layout(std140, binding = 1) readonly buffer MeshletDescriptions {
        MeshletDescription descriptions[];
    } meshletDescriptions;

#endif


struct RenderStatistics
{
    uint64_t PrimitiveCount;
    uint64_t TaskShaderInvocations;
    uint64_t MeshShaderInvocations;

};

layout(std430, binding = 2) writeonly buffer RenderStats {
    RenderStatistics statistics;
} renderStatistics;

shared uint primCounter;
shared uint meshShaderInvocations;



// Push constants

layout( push_constant ) uniform constants
{
	mat4 transform_matrix;
} PushConstants;






// Task shader input

struct Task {
    //     (meshletInfoBufferOffset, meshletCount)
    u8vec2 meshShaderProcessingUnits[MESHLETS_PER_TASK_INVOCATION * MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS + 2];
    //     (meshletDelta, LODLevel)
    u8vec2 meshletInfoBuffer[MESHLETS_PER_TASK_INVOCATION * MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS + 2];


    uint   baseMeshletID;
    uint    heightmap_length;

    float Longitude;
    float Latitude;

    vec3 observatorPosition;

    uint globalMeshletCount, localMeshletOffsetsCount;

};

taskPayloadSharedEXT Task IN;

// Indexing stuff

uint quadID = gl_LocalInvocationID.x;
uint localMeshletOffsetBaseID = MESHLETS_PER_MESH_WORKGROUP * gl_WorkGroupID.x;



// Output

layout(location=0) out Interpolants {
    vec3  wPos;
    float   wHeight;
    flat  uint meshletID;
    flat uint laneID;
    flat float DistFromObservator;
} OUT[];


// Utils

/*
void processVertex(uvec2 vertexOffset, uint meshletID, MeshletDescription meshlet, uint vertexIndexOffset, inout bool cull, inout uint vertIndexHolder){
    vertexOffset.x = min(vertexOffset.x, meshlet.Dimensions.x - 1);
    vertexOffset.y = min(vertexOffset.y, meshlet.Dimensions.y - 1);

    vertIndexHolder = vertexOffset.x + vertexOffset.y * meshlet.Dimensions.x + vertexIndexOffset;

    uint heightmapIndex = meshlet.HeightmapDataOffset + vertexOffset.x + meshlet.Dimensions.x * vertexOffset.y;
    float height = float(int(heightmapData.m_Heights[heightmapIndex]));

    vec3 vertA = vertexToPolarToCartesian(meshlet.Offset + vertexOffset, IN.Latitude, IN.Longitude, height);

    // Interpolants
    OUT[vertIndexHolder].wPos = vertA;
    OUT[vertIndexHolder].wHeight = height;
    OUT[vertIndexHolder].DistFromObservator = length(vertA - IN.observatorPosition);
    OUT[vertIndexHolder].meshletID = meshletID;
    OUT[vertIndexHolder].laneID = 0;


    gl_MeshVerticesEXT[vertIndexHolder].gl_Position = PushConstants.transform_matrix * vec4(vertA, 1.0);

    float observerHorizonDistance = observerHorizonDistance(IN.observatorPosition);
    cull = cull && (observerHorizonDistance < length(vertA - IN.observatorPosition));
}
*/

void main() {


    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 2);

    gl_MeshVerticesEXT[0].gl_Position = vec4(0, 1, 0, 1);
    gl_MeshVerticesEXT[1].gl_Position = vec4(1, 1, 0, 1);
    gl_MeshVerticesEXT[2].gl_Position = vec4(0, 1, 1, 1);

    SetMeshOutputsEXT(3, 1);

    return;


/*
    primCounter = 0;
    meshShaderInvocations = 0;

    // check meshlet IDs are correct

    bool skip = localMeshletOffsetBaseID >= IN.localMeshletOffsetsCount;

    if(skip){
        return;
    }

    // we change quadID to a vertex index offset in the meshlet
    // quadIDs go from 0 to 63.
    quadID =
        quadID % (MESHLET_LENGTH - 1) + (quadID / (MESHLET_LENGTH - 1)) * MESHLET_LENGTH;


    memoryBarrierShared();
    barrier();

    atomicAdd(meshShaderInvocations, 1);

    UNROLL_LOOP
    for(uint i = 0; i < MESHLETS_PER_MESH_WORKGROUP; i++){
        uint meshletID = IN.baseMeshletID + IN.meshletOffsets[localMeshletOffsetBaseID + i].x;

        MeshletDescription thisMeshlet = meshletDescriptions.descriptions[min(meshletID, IN.globalMeshletCount - 1)];

        skip = meshletID > IN.globalMeshletCount;



        // create vertices
        uvec2 quadCoords = uvec2(quadID % thisMeshlet.Dimensions.x, quadID / thisMeshlet.Dimensions.x);

        bool cull = true;

        uint8_t quadStride = IN.meshletOffsets[localMeshletOffsetBaseID + i].y;

        uint meshletVertexOffset = i * MESHLET_LENGTH * MESHLET_LENGTH;

        uint vertAIndex = 0, vertBIndex = 0, vertCIndex = 0, vertDIndex = 0;

        processVertex(quadCoords,                                   meshletID, thisMeshlet, meshletVertexOffset, cull, vertAIndex);
        processVertex(quadCoords + uvec2(quadStride, 0),            meshletID, thisMeshlet, meshletVertexOffset, cull, vertBIndex);
        processVertex(quadCoords + uvec2(0, quadStride),            meshletID, thisMeshlet, meshletVertexOffset, cull, vertCIndex);
        processVertex(quadCoords + uvec2(quadStride, quadStride),   meshletID, thisMeshlet, meshletVertexOffset, cull, vertDIndex);

        skip = skip ||
            ( quadCoords.x % quadStride > 0 || quadCoords.y % quadStride > 0 ||
              quadCoords.x + quadStride >= MESHLET_LENGTH || quadCoords.y + quadStride >= MESHLET_LENGTH );

        // Add primitives
        uvec4 verts = uvec4( vertAIndex, vertBIndex, vertCIndex, vertDIndex );

        if(!skip){
            uint primID = atomicAdd(primCounter, 2);

            gl_PrimitiveTriangleIndicesEXT[primID] = uvec3(verts.y, verts.z, verts.x);
            gl_PrimitiveTriangleIndicesEXT[primID + 1] = uvec3(verts.z, verts.y, verts.w);

            gl_MeshPrimitivesEXT[primID].gl_CullPrimitiveEXT = cull;
            gl_MeshPrimitivesEXT[primID + 1].gl_CullPrimitiveEXT = cull;

            gl_MeshPrimitivesEXT[primID].gl_PrimitiveID = int(2*quadID);
            gl_MeshPrimitivesEXT[primID + 1].gl_PrimitiveID = int(2*quadID + 1);
        }
    }


    memoryBarrierShared();
    barrier();



    if(gl_LocalInvocationID.x == 0){

        // to fix
        SetMeshOutputsEXT(MESHLETS_PER_MESH_WORKGROUP * MESHLET_LENGTH * MESHLET_LENGTH, primCounter);

        atomicAdd(renderStatistics.statistics.PrimitiveCount, primCounter);
        atomicAdd(renderStatistics.statistics.MeshShaderInvocations, meshShaderInvocations);
    }
    */
}