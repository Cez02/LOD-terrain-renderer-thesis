#version 460

// Setup

#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_atomic_int64 : require

#extension GL_EXT_shader_16bit_storage : require

#extension GL_EXT_shader_explicit_arithmetic_types_int8  : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#extension GL_EXT_mesh_shader : require

#extension GL_EXT_control_flow_attributes: require
#define UNROLL_LOOP [[unroll]]


#include "common.h"

layout (local_size_x=MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS) in;


// Push constants

layout( push_constant ) uniform constants
{
    layout (offset = 64)  vec3 ObservatorPosition;
     uint padding;
     uint MeshletCount;
     uint HeightmapLength;
     uint BaseMeshletOffset;
     float Longitude;
     float Latitude;
     uint8_t LODLevel;

} PushConstants;


// Uniforms



// SSBOs

layout(std430, binding = 0) readonly buffer HeightmapData {
    int16_t m_Heights[];
} heightmapData;

#ifdef ENCODED_MESHLETS

    layout(std430, binding = 1) readonly buffer MeshletDescriptions {
        EncodedMeshletDescription descriptions[];
    } meshletDescriptions;

#else

    layout(std140, binding = 1) readonly buffer MeshletDescriptions {
        MeshletDescription descriptions[];
    } meshletDescriptions;

#endif

struct RenderStatistics
{
    uint64_t PrimitiveCount;
    uint64_t TaskShaderInvocations;
    uint64_t MeshShaderInvocations;

};

layout(std430, binding = 2) writeonly buffer RenderStats {
    RenderStatistics statistics;
} renderStatistics;

shared int taskShaderInvocations;

// Indexing stuff

uint baseID = gl_WorkGroupID.x;
uint laneID = gl_LocalInvocationID.x;


// Task payload

#define TASK_ITERATIONS MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS

struct Task {
    uint   baseMeshletIDOffset;
    uint   meshletIDLocalOffset[MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS];
    uint    heightmap_length;

    float Longitude;
    float Latitude;

    uint LODLevel;
    vec3 observatorPosition;
};

taskPayloadSharedEXT Task OUT;

// Utils

void main() {

    taskShaderInvocations = 0;

    memoryBarrierShared();
    barrier();

    atomicAdd(taskShaderInvocations, 1);


    OUT.baseMeshletIDOffset = PushConstants.BaseMeshletOffset + baseID * MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS;
    OUT.heightmap_length = PushConstants.HeightmapLength;
    OUT.Longitude = PushConstants.Longitude;
    OUT.Latitude = PushConstants.Latitude;
    OUT.LODLevel = PushConstants.LODLevel;
    OUT.observatorPosition = PushConstants.ObservatorPosition;

    int meshletCount = 0;

    float observerHorizonDistance = observerHorizonDistance(OUT.observatorPosition);

    //UNROLL_LOOP
    for(uint8_t i = uint8_t(0); i<TASK_ITERATIONS ; i++) {
        // We set the indexes in accordance with LOD level

        bool skipMeshlet = i >= PushConstants.MeshletCount - OUT.baseMeshletIDOffset;

        int meshletID = min(int(i), int(PushConstants.MeshletCount) - int(OUT.baseMeshletIDOffset) - 1);
        MeshletDescription meshlet = meshletDescriptions.descriptions[OUT.baseMeshletIDOffset + meshletID];

        skipMeshlet = skipMeshlet || shouldCull(meshlet, PushConstants.Latitude, PushConstants.Longitude, 4000.0f, PushConstants.ObservatorPosition, observerHorizonDistance);

        OUT.meshletIDLocalOffset[meshletCount] = i;
        meshletCount += 1 - int(skipMeshlet);
    }

    if(OUT.baseMeshletIDOffset >= PushConstants.MeshletCount){
        //EmitMeshTasksEXT(0, 1, 1);
        return;
    }

    memoryBarrierShared();
    barrier();

    if(gl_GlobalInvocationID.x == 0){
        atomicAdd(renderStatistics.statistics.TaskShaderInvocations, taskShaderInvocations);
    }


    //uint meshShadersToEmitt = min(TASK_ITERATIONS, PushConstants.MeshletCount - OUT.baseMeshletIDOffset);
    // We only emit as many mesh shaders as we need
    EmitMeshTasksEXT(meshletCount, 1, 1);

}